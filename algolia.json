[{"author":null,"categories":["Cloud"],"content":"A local volume represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported.","date":1680912000,"description":"A local volume represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported.","dir":"post\\","excerpt_html":"A local volume represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported.","excerpt_text":"A local volume represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported.","expirydate":-62135596800,"fuzzywordcount":1700,"html":"A local volume represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported.","keywords":null,"kind":"page","lang":"en","lastmod":1680912000,"objectID":"2581cc6ed61f532e7f782d80ccfdafc8","permalink":"http://akjamie.github.io/post/2023-04-08-k8s-pv-pvc-access-mode/","publishdate":"2023-04-08T00:00:00Z","readingtime":8,"relpermalink":"/post/2023-04-08-k8s-pv-pvc-access-mode/","section":"post","summary":"A local volume represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported. Compared to hostPath volumes, local volumes are used in a durable and portable manner without manually scheduling pods to nodes. The system is aware of the volume\u0026rsquo;s node constraints by looking at the node affinity on the PersistentVolume.","tags":["Kubernetes"],"title":"Explore Kubernetes Local PV \u0026 PVC access mode","type":"post","url":"/post/2023-04-08-k8s-pv-pvc-access-mode/","weight":0,"wordcount":1643},{"author":null,"categories":["Cloud"],"content":"Nearly all requests to Vault must be accompanied by an authentication token. This includes all API requests, as well as via the Vault CLI and other libraries, therefore application running in kubernetes is no exception. Luckily, Vault provides Kubernetes auth method to authenticate the clients using a Kubernetes Service Account Token, and Vault Agent which could be leveraged to automatically inject the secrets from vault into kubernetes pods through init container pattern.","date":1679788800,"description":"Nearly all requests to Vault must be accompanied by an authentication token. This includes all API requests, as well as via the Vault CLI and other libraries, therefore application running in kubernetes is no exception. Luckily, Vault provides Kubernetes auth method to authenticate the clients using a Kubernetes Service Account Token, and Vault Agent which could be leveraged to automatically inject the secrets from vault into kubernetes pods through init container pattern.","dir":"post\\","excerpt_html":"Nearly all requests to Vault must be accompanied by an authentication token. This includes all API requests, as well as via the Vault CLI and other libraries, therefore application running in kubernetes is no exception. Luckily, Vault provides Kubernetes auth method to authenticate the clients using a Kubernetes Service Account Token, and Vault Agent which could be leveraged to automatically inject the secrets from vault into kubernetes pods through init container pattern.","excerpt_text":"Nearly all requests to Vault must be accompanied by an authentication token. This includes all API requests, as well as via the Vault CLI and other libraries, therefore application running in kubernetes is no exception. Luckily, Vault provides Kubernetes auth method to authenticate the clients using a Kubernetes Service Account Token, and Vault Agent which could be leveraged to automatically inject the secrets from vault into kubernetes pods through init container pattern.","expirydate":-62135596800,"fuzzywordcount":800,"html":"Nearly all requests to Vault must be accompanied by an authentication token. This includes all API requests, as well as via the Vault CLI and other libraries, therefore application running in kubernetes is no exception. Luckily, Vault provides Kubernetes auth method to authenticate the clients using a Kubernetes Service Account Token, and Vault Agent which could be leveraged to automatically inject the secrets from vault into kubernetes pods through init container pattern.","keywords":null,"kind":"page","lang":"en","lastmod":1679788800,"objectID":"f7719d87c3a916b00ae4840a78d75923","permalink":"http://akjamie.github.io/post/2023-03-26-vault-agent-with-k8s/","publishdate":"2023-03-26T00:00:00Z","readingtime":4,"relpermalink":"/post/2023-03-26-vault-agent-with-k8s/","section":"post","summary":"Challenge Nearly all requests to Vault must be accompanied by an authentication token. This includes all API requests, as well as via the Vault CLI and other libraries. If you can securely get the first secret from an originator to a consumer, all subsequent secrets transmitted between this originator and consumer can be authenticated with the trust established by the successful distribution and user of that first secret.\nThe applications running in a Kubernetes environment is no exception.","tags":["Vault","Kubernetes"],"title":"Vault Agent with Kubernetes","type":"post","url":"/post/2023-03-26-vault-agent-with-k8s/","weight":0,"wordcount":711},{"author":null,"categories":["Cloud"],"content":"To setup a HA Vault Cluster in Kubernetes","date":1679702400,"description":"To setup a HA Vault Cluster in Kubernetes","dir":"post\\","excerpt_html":"To setup a HA Vault Cluster in Kubernetes","excerpt_text":"To setup a HA Vault Cluster in Kubernetes","expirydate":-62135596800,"fuzzywordcount":1600,"html":"To setup a HA Vault Cluster in Kubernetes","keywords":null,"kind":"page","lang":"en","lastmod":1679702400,"objectID":"aab31349cf68ab8cd7c2f90c685c16b6","permalink":"http://akjamie.github.io/post/2023-03-25-vault-on-k8s/","publishdate":"2023-03-25T00:00:00Z","readingtime":8,"relpermalink":"/post/2023-03-25-vault-on-k8s/","section":"post","summary":"What is Vault? Vault introduction HashiCorp Vault is an identity-based secrets and encryption management system. A secret is anything that you want to tightly\ncontrol access to, such as API encryption keys, passwords, and certificates. Vault provides encryption services that are gated by authentication and authorization methods.Using Vault’s UI, CLI, or HTTP API, access to secrets and other sensitive data can be securely stored and managed, tightly controlled (restricted), and auditable.","tags":["Vault","Kubernetes"],"title":"Vault on Kubernetes","type":"post","url":"/post/2023-03-25-vault-on-k8s/","weight":0,"wordcount":1524},{"author":null,"categories":["NoSQL"],"content":"Redis 集群","date":1657407810,"description":"Redis 集群","dir":"post\\","excerpt_html":"Redis 集群","excerpt_text":"Redis 集群","expirydate":-62135596800,"fuzzywordcount":1500,"html":"Redis 集群","keywords":null,"kind":"page","lang":"en","lastmod":1657407810,"objectID":"57360c3a8a1b44aeccfd78f0fcfbbbe7","permalink":"http://akjamie.github.io/post/2022-07-09-redis-cluster-01/","publishdate":"2022-07-09T23:03:30Z","readingtime":3,"relpermalink":"/post/2022-07-09-redis-cluster-01/","section":"post","summary":"What\u0026rsquo;s Redis Cluster Redis Cluster is a distributed implementation of Redis with the following goals in order of importance in the design: High performance and linear scalability up to 1000 nodes. There are no proxies, asynchronous replication is used, and no merge operations are performed on values. 在多达 1000 个节点的时候仍能保持高性能及线性的可扩","tags":["Redis","NoSQL"],"title":"Redis advance III","type":"post","url":"/post/2022-07-09-redis-cluster-01/","weight":0,"wordcount":1454},{"author":null,"categories":["Microservice"],"content":"记录websocket集成的杂事","date":1656892800,"description":"记录websocket集成的杂事","dir":"post\\","excerpt_html":"记录websocket集成的杂事","excerpt_text":"记录websocket集成的杂事","expirydate":-62135596800,"fuzzywordcount":300,"html":"记录websocket集成的杂事","keywords":null,"kind":"page","lang":"en","lastmod":1656892800,"objectID":"ec493e039d35b0eef439cb4e016fc0e0","permalink":"http://akjamie.github.io/post/2022-07-04-spring-websocket-stomp/","publishdate":"2022-07-04T00:00:00Z","readingtime":1,"relpermalink":"/post/2022-07-04-spring-websocket-stomp/","section":"post","summary":"Background 最近在做一个类似于快速竞价的功能的技术设计，即在很短的时间内通过一个集中的平台拿到各家的报价，类似于支付宝上的那个车险报价，发送完汽车信息","tags":["Websocket","Spring-stomp","K8S"],"title":"Websocket集成","type":"post","url":"/post/2022-07-04-spring-websocket-stomp/","weight":0,"wordcount":245},{"author":null,"categories":["NoSQL"],"content":"Redis主从复制","date":1656374400,"description":"Redis主从复制","dir":"post\\","excerpt_html":"Redis主从复制","excerpt_text":"Redis主从复制","expirydate":-62135596800,"fuzzywordcount":1500,"html":"Redis主从复制","keywords":null,"kind":"page","lang":"en","lastmod":1656374400,"objectID":"c3274eef906dd927be1de9ea233d52ba","permalink":"http://akjamie.github.io/post/2022-06-28-redis-master-slave-replication/","publishdate":"2022-06-28T00:00:00Z","readingtime":3,"relpermalink":"/post/2022-06-28-redis-master-slave-replication/","section":"post","summary":"主从复制 基本概念 主机数据更新后根据配置和策略，自动同步到备份机的master/slave机制，其中master以写为主，而slave主要以读","tags":["Redis","NoSQL","K8S"],"title":"Redis advance II","type":"post","url":"/post/2022-06-28-redis-master-slave-replication/","weight":0,"wordcount":1401},{"author":null,"categories":["NoSQL"],"content":"Redis事务和持久化","date":1656288000,"description":"Redis事务和持久化","dir":"post\\","excerpt_html":"Redis事务和持久化","excerpt_text":"Redis事务和持久化","expirydate":-62135596800,"fuzzywordcount":1600,"html":"Redis事务和持久化","keywords":null,"kind":"page","lang":"en","lastmod":1656288000,"objectID":"627e17847d3ac2626ecc169cf56b8857","permalink":"http://akjamie.github.io/post/2022-06-27-redis-basic-2/","publishdate":"2022-06-27T00:00:00Z","readingtime":4,"relpermalink":"/post/2022-06-27-redis-basic-2/","section":"post","summary":"Redis 事务 事务概念和基本操作 其为命令提供一个单独的隔离环境，事务中所有的命令都会序列化，按顺序地执行，执行过程中不会被其他客户端发送过来的命令请","tags":["Redis","NoSQL"],"title":"Redis foundation - III","type":"post","url":"/post/2022-06-27-redis-basic-2/","weight":0,"wordcount":1521},{"author":null,"categories":["NoSQL"],"content":"Redis进阶知识总结","date":1655942400,"description":"Redis进阶知识总结","dir":"post\\","excerpt_html":"Redis进阶知识总结","excerpt_text":"Redis进阶知识总结","expirydate":-62135596800,"fuzzywordcount":1900,"html":"Redis进阶知识总结","keywords":null,"kind":"page","lang":"en","lastmod":1655942400,"objectID":"a58bda2dc2e983ffccb2106a46043271","permalink":"http://akjamie.github.io/post/2022-06-23-redis-advance/","publishdate":"2022-06-23T00:00:00Z","readingtime":4,"relpermalink":"/post/2022-06-23-redis-advance/","section":"post","summary":"bitmap 在前面的基础回顾中提到了bitmap这种数据结构，主要用来应对string的位操作，简单高效 适用场景：单状态统计，如每天系统用户登录情况统","tags":["Redis","NoSQL"],"title":"Redis advance I","type":"post","url":"/post/2022-06-23-redis-advance/","weight":0,"wordcount":1852},{"author":null,"categories":["NoSQL"],"content":"Redis基础知识回顾","date":1653868800,"description":"Redis基础知识回顾","dir":"post\\","excerpt_html":"Redis基础知识回顾","excerpt_text":"Redis基础知识回顾","expirydate":-62135596800,"fuzzywordcount":1700,"html":"Redis基础知识回顾","keywords":null,"kind":"page","lang":"en","lastmod":1653868800,"objectID":"4d03a5849228f6e62482d3254299bef5","permalink":"http://akjamie.github.io/post/2022-05-31-redis-basic-1/","publishdate":"2022-05-30T00:00:00Z","readingtime":4,"relpermalink":"/post/2022-05-31-redis-basic-1/","section":"post","summary":"Redis基础 Common知识 Redis 有16个数据库，一般都使用0号库，使用select dbid 来切换db。 Redis是单线程 + 多路io服用技术 Redis vs memcache Redis","tags":["Redis","NoSQL"],"title":"Redis foundation - II","type":"post","url":"/post/2022-05-31-redis-basic-1/","weight":0,"wordcount":1649},{"author":null,"categories":["Cloud"],"content":"Deploy K8S dashboard with TLS enabled","date":1649721600,"description":"Deploy K8S dashboard with TLS enabled","dir":"post\\","excerpt_html":"Deploy K8S dashboard with TLS enabled","excerpt_text":"Deploy K8S dashboard with TLS enabled","expirydate":-62135596800,"fuzzywordcount":900,"html":"Deploy K8S dashboard with TLS enabled","keywords":null,"kind":"page","lang":"en","lastmod":1649721600,"objectID":"94a7ff40d3c2d45b2e0f360946bbcdbb","permalink":"http://akjamie.github.io/post/2022-04-12-kubernetes-dashboard/","publishdate":"2022-04-12T00:00:00Z","readingtime":4,"relpermalink":"/post/2022-04-12-kubernetes-dashboard/","section":"post","summary":"Install dashboard To run the following command to deploy dashboard\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.5.0/aio/deploy/recommended.yaml once done, to check the resource status under the namespace of kubernetes-dashboard, if all the resources are running, that means dashboard is deployed successfully. ps:\nOn above screenshot, you can see the EXTERNAL-IP for kubernetes-dashboard service, the reason is i edit the service change the type from ClusterIp to LoadBalancer, and the loadbalancer is backed by Metallb.","tags":["Kubernetes","DevOps"],"title":"Kubernetes dashboard deployment","type":"post","url":"/post/2022-04-12-kubernetes-dashboard/","weight":0,"wordcount":807},{"author":null,"categories":["Cloud"],"content":"To mark down some key steps for later review","date":1628467200,"description":"To mark down some key steps for later review","dir":"post\\","excerpt_html":"To mark down some key steps for later review","excerpt_text":"To mark down some key steps for later review","expirydate":-62135596800,"fuzzywordcount":900,"html":"To mark down some key steps for later review","keywords":null,"kind":"page","lang":"en","lastmod":1628467200,"objectID":"9f5d41a6aef178dbadd399e3a59c948d","permalink":"http://akjamie.github.io/post/2021-08-09-aws-demo-01-autoscale-test/","publishdate":"2021-08-09T00:00:00Z","readingtime":5,"relpermalink":"/post/2021-08-09-aws-demo-01-autoscale-test/","section":"post","summary":"I\u0026rsquo;m on the path of AWS Professinal Certified Architect exam preparation, want to document some key points in the demos for later review to enhance the understanding of knowledge. In this demo, i\u0026rsquo;m going to test the AWS auto scaling and utilize the EC2 network knowledges.\nObjective To build a health checking springboot application and package as docker image hosted on AWS ECR. Setup basic network infrastructure, VPC, Subnet, Internet Gateway, Route table,Security group, etc.","tags":["AWS","Cloud"],"title":"Demo - AWS EC2 instance auto scaling","type":"post","url":"/post/2021-08-09-aws-demo-01-autoscale-test/","weight":0,"wordcount":886},{"author":null,"categories":["Microservice"],"content":"To mark down a batch data sync accross system solution","date":1620432000,"description":"To mark down a batch data sync accross system solution","dir":"post\\","excerpt_html":"To mark down a batch data sync accross system solution","excerpt_text":"To mark down a batch data sync accross system solution","expirydate":-62135596800,"fuzzywordcount":700,"html":"To mark down a batch data sync accross system solution","keywords":null,"kind":"page","lang":"en","lastmod":1620432000,"objectID":"1f49b0a4d10236f01af572359f09a560","permalink":"http://akjamie.github.io/post/2021-05-08-microservice-data-sync/","publishdate":"2021-05-08T00:00:00Z","readingtime":3,"relpermalink":"/post/2021-05-08-microservice-data-sync/","section":"post","summary":"Summary To mark down a batch data sync accross system solution, tested daily sync data volume is around 10w.\nIn this solution, adopted the message driven batch processing rather than traditional fixed time schedule batch.\nAlso applied the microservice design to eliminate the system dependency and well protect the data/system boundry,which is also aligned with the DEVOPS,,both team could focus on their own domain/services\u0026rsquo; development and maintenance.\nTechniques used Springboot + Spring cloud config, constrained by infra, services are running on in hourse VM instances.","tags":["Microservice","Batch"],"title":"Microservice design - practice","type":"post","url":"/post/2021-05-08-microservice-data-sync/","weight":0,"wordcount":624},{"author":null,"categories":["Cloud"],"content":"Experience sharing","date":1615248000,"description":"Experience sharing","dir":"post\\","excerpt_html":"Experience sharing","excerpt_text":"Experience sharing","expirydate":-62135596800,"fuzzywordcount":500,"html":"Experience sharing","keywords":null,"kind":"page","lang":"en","lastmod":1615248000,"objectID":"97aec582d92ad32a8139a48ea9ecea7d","permalink":"http://akjamie.github.io/post/2021-03-09-gcp-professional-cerified-architecture-prep/","publishdate":"2021-03-09T00:00:00Z","readingtime":2,"relpermalink":"/post/2021-03-09-gcp-professional-cerified-architecture-prep/","section":"post","summary":"Today i took Google Cloud Certified Professional Cloud Architect exam, the result is pass，through the final result is being reviewed for compliance with exam terms and conditions, i\u0026rsquo;d like to summarize the preparation path i went through for this exam, hope that could help others who want to take the same exam.\nAbout the exam Professional Cloud Architect is one of the google cloud professonal cerficates, it requires a thorough understanding of cloud architecture and Google Cloud Platform, and verifies the capability of design, develop, and manage robust, secure, scalable, highly available, and dynamic solutions to drive business objectives.","tags":["GCP","Certificate"],"title":"How i prepare the Google Cloud Professional Cloud Architect Certificate","type":"post","url":"/post/2021-03-09-gcp-professional-cerified-architecture-prep/","weight":0,"wordcount":421},{"author":null,"categories":["Microservice"],"content":"to run a cloud config service which built using spring boot cloud config","date":1606608000,"description":"to run a cloud config service which built using spring boot cloud config","dir":"post\\","excerpt_html":"to run a cloud config service which built using spring boot cloud config","excerpt_text":"to run a cloud config service which built using spring boot cloud config","expirydate":-62135596800,"fuzzywordcount":1000,"html":"to run a cloud config service which built using spring boot cloud config","keywords":null,"kind":"page","lang":"en","lastmod":1606608000,"objectID":"2a8f9c88286c4d7e3e1b6932d3971e64","permalink":"http://akjamie.github.io/post/2020-11-29-run-application-on-k8s/","publishdate":"2020-11-29T00:00:00Z","readingtime":5,"relpermalink":"/post/2020-11-29-run-application-on-k8s/","section":"post","summary":"this page shows how to run a spring boot application on local K8S environment.\nObjectives 1.create spring boot application and build a docker image\n2.create local persistent volume to share the files from host\n3.create deployment and service to run this application and expose for external access.\nBefore you begin install docker desktop in local and enable local k8s cluster, more details please refer to docker official guide or k8s local cluster setup guide.","tags":["Spring Cloud","K8S"],"title":"Kubernates - Practice","type":"post","url":"/post/2020-11-29-run-application-on-k8s/","weight":0,"wordcount":959},{"author":null,"categories":["Cloud"],"content":"gcp network connections - VPC peering/VPN - poc","date":1599436800,"description":"gcp network connections - VPC peering/VPN - poc","dir":"post\\","excerpt_html":"gcp network connections - VPC peering/VPN - poc","excerpt_text":"gcp network connections - VPC peering/VPN - poc","expirydate":-62135596800,"fuzzywordcount":500,"html":"gcp network connections - VPC peering/VPN - poc","keywords":null,"kind":"page","lang":"en","lastmod":1599436800,"objectID":"fc669180747381671e5f6b7abc518fee","permalink":"http://akjamie.github.io/post/2020-09-07-gcp-network-connection/","publishdate":"2020-09-07T00:00:00Z","readingtime":2,"relpermalink":"/post/2020-09-07-gcp-network-connection/","section":"post","summary":"To document the setup process for VPC peering accross different GCP project VPCs for demo purpose only.\nSetup VPC peering accross two GCP projects in this demo, will create two GCP projects, and setup VPC network peering to work as network bridge to make sure the vm in one of GCP project can access the MongoDB installed on VM of another GCP project. preparation Mongo backups 1\u0026gt; backup MongoDB\nto use mongo shell command to backup data, samples as below","tags":["GCP","VPC","Mongo"],"title":"GCP Network Connection (1)","type":"post","url":"/post/2020-09-07-gcp-network-connection/","weight":0,"wordcount":408},{"author":null,"categories":["NoSQL"],"content":"Mongodb 基本操作 - Insert/Find/Update/Remove","date":1599264000,"description":"Mongodb 基本操作 - Insert/Find/Update/Remove","dir":"post\\","excerpt_html":"Mongodb 基本操作 - Insert/Find/Update/Remove","excerpt_text":"Mongodb 基本操作 - Insert/Find/Update/Remove","expirydate":-62135596800,"fuzzywordcount":1200,"html":"Mongodb 基本操作 - Insert/Find/Update/Remove","keywords":null,"kind":"page","lang":"en","lastmod":1599264000,"objectID":"14760c47f9d32b9595709cb8f02ce592","permalink":"http://akjamie.github.io/post/2020-09-05-mongo-basics/","publishdate":"2020-09-05T00:00:00Z","readingtime":3,"relpermalink":"/post/2020-09-05-mongo-basics/","section":"post","summary":"Mongo installation(for test) docker command for local mongo installation docker run -p 27017:27017 -v /Users/jamie/Documents/work-benches/mongo/test:/data/db --name mongo -d mongo:latest check mongo running status docker ps | grep mongo 9161bd4811a8 mongo:latest \u0026ldquo;docker-entrypoint.s…\u0026rdquo; 6 days ago Up 6 days","tags":["NoSQL","Mongo"],"title":"Mongo DB Basics (1)","type":"post","url":"/post/2020-09-05-mongo-basics/","weight":0,"wordcount":1166},{"author":null,"categories":["Microservice"],"content":"Spring Transaction 之 JTA事务管理","date":1567209600,"description":"Spring Transaction 之 JTA事务管理","dir":"post\\","excerpt_html":"Spring Transaction 之 JTA事务管理","excerpt_text":"Spring Transaction 之 JTA事务管理","expirydate":-62135596800,"fuzzywordcount":1900,"html":"Spring Transaction 之 JTA事务管理","keywords":null,"kind":"page","lang":"en","lastmod":1567209600,"objectID":"3e38b8eb6a18a4f74033eadce2edb3b4","permalink":"http://akjamie.github.io/post/2019-08-31-spring-global-transaction/","publishdate":"2019-08-31T00:00:00Z","readingtime":4,"relpermalink":"/post/2019-08-31-spring-global-transaction/","section":"post","summary":"先回顾上一篇sprint local transaction的内容，本地事务是用于指定资源，即单一数据源，其主要结构如下： 那么我们来看看spring的g","tags":["Spring","Transaction Management"],"title":"Spring Transaction","type":"post","url":"/post/2019-08-31-spring-global-transaction/","weight":0,"wordcount":1823},{"author":null,"categories":["Microservice"],"content":"Spring Transaction 之 Local Transaction实现原理","date":1567123200,"description":"Spring Transaction 之 Local Transaction实现原理","dir":"post\\","excerpt_html":"Spring Transaction 之 Local Transaction实现原理","excerpt_text":"Spring Transaction 之 Local Transaction实现原理","expirydate":-62135596800,"fuzzywordcount":1700,"html":"Spring Transaction 之 Local Transaction实现原理","keywords":null,"kind":"page","lang":"en","lastmod":1567123200,"objectID":"e9b1e2c0b8cd6cae4ca10b6b1d7e3d6a","permalink":"http://akjamie.github.io/post/2019-08-30-spring-local-transaction/","publishdate":"2019-08-30T00:00:00Z","readingtime":4,"relpermalink":"/post/2019-08-30-spring-local-transaction/","section":"post","summary":"事务特性和隔离级别 事务基础 事务特性 - 原子性(Atomicity) 事务包含的所有操作是一个原子单元，要么全部成功，要么全部失败 - 一致性（Con","tags":["Spring","Transaction Management"],"title":"Spring Transaction","type":"post","url":"/post/2019-08-30-spring-local-transaction/","weight":0,"wordcount":1664},{"author":null,"categories":["NoSQL"],"content":"redis 基础知识","date":1564876800,"description":"redis 基础知识","dir":"post\\","excerpt_html":"redis 基础知识","excerpt_text":"redis 基础知识","expirydate":-62135596800,"fuzzywordcount":6000,"html":"redis 基础知识","keywords":null,"kind":"page","lang":"en","lastmod":1564876800,"objectID":"7a7657940b109fd5d226b9c2f64ee3db","permalink":"http://akjamie.github.io/post/2019-08-04-redis-basic/","publishdate":"2019-08-04T00:00:00Z","readingtime":12,"relpermalink":"/post/2019-08-04-redis-basic/","section":"post","summary":"redis是一个key-value存储系统，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)","tags":["Redis","NoSQL"],"title":"Redis foundation - I","type":"post","url":"/post/2019-08-04-redis-basic/","weight":0,"wordcount":5915},{"author":null,"categories":["Microservice"],"content":"分享一个遇到的分布式事务case, 以及部分引申思考","date":1563910810,"description":"分享一个遇到的分布式事务case, 以及部分引申思考","dir":"post\\","excerpt_html":"分享一个遇到的分布式事务case, 以及部分引申思考","excerpt_text":"分享一个遇到的分布式事务case, 以及部分引申思考","expirydate":-62135596800,"fuzzywordcount":800,"html":"分享一个遇到的分布式事务case, 以及部分引申思考","keywords":null,"kind":"page","lang":"en","lastmod":1563910810,"objectID":"8330b93025c5aeced8363c4d3612ede8","permalink":"http://akjamie.github.io/post/2019-07-24-one-distributed-transaction-user-case/","publishdate":"2019-07-23T19:40:10Z","readingtime":2,"relpermalink":"/post/2019-07-24-one-distributed-transaction-user-case/","section":"post","summary":"用户场景 在某企业app上做Payment业务，在app端准备好request data， 如debit account number, credit account number, amount, notes, 点击submit。 业务流程如","tags":["Design","Distributed Transaction","Transaction Management"],"title":"微服务中的分布式事务","type":"post","url":"/post/2019-07-24-one-distributed-transaction-user-case/","weight":0,"wordcount":774},{"author":null,"categories":["Microservice"],"content":"spring batch 批处理poc","date":1563888970,"description":"spring batch 批处理poc","dir":"post\\","excerpt_html":"spring batch 批处理poc","excerpt_text":"spring batch 批处理poc","expirydate":-62135596800,"fuzzywordcount":1900,"html":"spring batch 批处理poc","keywords":null,"kind":"page","lang":"en","lastmod":1563888970,"objectID":"8490cf286f8f2f80867d09f757b5b4de","permalink":"http://akjamie.github.io/post/2019-07-21-spring-batch-single-process-remote-partitioning/","publishdate":"2019-07-23T13:36:10Z","readingtime":4,"relpermalink":"/post/2019-07-21-spring-batch-single-process-remote-partitioning/","section":"post","summary":"Spring batch是轻量级，全面的批处理框架，旨在开发对企业系统日常运营至关重要的强大批处理应用程序。 Spring Batch负责大量记录，包括日志记录/跟踪","tags":["Spring Batch"],"title":"Spring batch - single process \u0026 remote partitioning(multi instances)","type":"post","url":"/post/2019-07-21-spring-batch-single-process-remote-partitioning/","weight":0,"wordcount":1804},{"author":null,"categories":["Microservice"],"content":"通过一个demo，来综合运用spring cloud系列技术","date":1563888970,"description":"通过一个demo，来综合运用spring cloud系列技术","dir":"post\\","excerpt_html":"通过一个demo，来综合运用spring cloud系列技术","excerpt_text":"通过一个demo，来综合运用spring cloud系列技术","expirydate":-62135596800,"fuzzywordcount":1400,"html":"通过一个demo，来综合运用spring cloud系列技术","keywords":null,"kind":"page","lang":"en","lastmod":1563888970,"objectID":"9b3e9026272f83b7fa03bbc655d7052a","permalink":"http://akjamie.github.io/post/2019-07-15-spring-cloud-demo-overview/","publishdate":"2019-07-23T13:36:10Z","readingtime":3,"relpermalink":"/post/2019-07-15-spring-cloud-demo-overview/","section":"post","summary":"Demo的介绍 本文主要通过一个小demo，来综合运用spring cloud系列技术，demo中主要包含如下模块/组建： Authorization service, 基于Spring Security","tags":["Spring Cloud","Spring Boot","Docker"],"title":"Spring Cloud Series","type":"post","url":"/post/2019-07-15-spring-cloud-demo-overview/","weight":0,"wordcount":1395},{"author":null,"categories":["Others"],"content":"介绍用如何使用Let's Encrypt's Certbot生成CA证书，并配置在nginx中保护站点","date":1563129005,"description":"介绍用如何使用Let's Encrypt's Certbot生成CA证书，并配置在nginx中保护站点","dir":"post\\","excerpt_html":"介绍用如何使用Let's Encrypt's Certbot生成CA证书，并配置在nginx中保护站点","excerpt_text":"介绍用如何使用Let's Encrypt's Certbot生成CA证书，并配置在nginx中保护站点","expirydate":-62135596800,"fuzzywordcount":1500,"html":"介绍用如何使用Let's Encrypt's Certbot生成CA证书，并配置在nginx中保护站点","keywords":null,"kind":"page","lang":"en","lastmod":1563129005,"objectID":"1e99a9399c856f918b86e98ea630ce98","permalink":"http://akjamie.github.io/2019/07/14/free-https-certs-docker-nginx/","publishdate":"2019-07-14T18:30:05Z","readingtime":3,"relpermalink":"/2019/07/14/free-https-certs-docker-nginx/","section":"post","summary":"Background Let\u0026rsquo;s Encrypt is a certificate authority that provides X.509 certificates for Transport Layer Security (TLS) encryption at no charge,The certificate is valid for 90 days, during which renewal can take place at anytime. 这样我们就可以用上免费的CA cert来安全expose我们自己的网站或者","tags":["Docker","Let’s Encrypt","Nginx"],"title":"Free CA Certs setup using Certbot + Docker + Nginx","type":"post","url":"/2019/07/14/free-https-certs-docker-nginx/","weight":0,"wordcount":1470},{"author":null,"categories":["Others"],"content":"Using Shadowsocks+proxychain to build network proxy for personal learning purpose","date":1563115852,"description":"Using Shadowsocks+proxychain to build network proxy for personal learning purpose","dir":"post\\","excerpt_html":"Using Shadowsocks+proxychain to build network proxy for personal learning purpose","excerpt_text":"Using Shadowsocks+proxychain to build network proxy for personal learning purpose","expirydate":-62135596800,"fuzzywordcount":1500,"html":"Using Shadowsocks+proxychain to build network proxy for personal learning purpose","keywords":null,"kind":"page","lang":"en","lastmod":1563115852,"objectID":"9ba7a47fc53cf70ad5cba2da0e710040","permalink":"http://akjamie.github.io/post/2019-07-14-linux-network-proxy-setup-desktop-terminal/","publishdate":"2019-07-14T14:50:52Z","readingtime":3,"relpermalink":"/post/2019-07-14-linux-network-proxy-setup-desktop-terminal/","section":"post","summary":"背景介绍 很多时候我们由于great firewall，我们无法访问某些网站，这时候就需要用到网络代理来应对一些比较urgent的case，本文","tags":["Shadowsocks","Proxychain"],"title":"Linux network proxy setup for desktop and terminal","type":"post","url":"/post/2019-07-14-linux-network-proxy-setup-desktop-terminal/","weight":0,"wordcount":1441},{"author":null,"categories":["Others"],"content":"介绍用docker-compose安装Vault并配置nginx代理，并与spring cloud application进行集成","date":1563106227,"description":"介绍用docker-compose安装Vault并配置nginx代理，并与spring cloud application进行集成","dir":"post\\","excerpt_html":"介绍用docker-compose安装Vault并配置nginx代理，并与spring cloud application进行集成","excerpt_text":"介绍用docker-compose安装Vault并配置nginx代理，并与spring cloud application进行集成","expirydate":-62135596800,"fuzzywordcount":1000,"html":"介绍用docker-compose安装Vault并配置nginx代理，并与spring cloud application进行集成","keywords":null,"kind":"page","lang":"en","lastmod":1563106227,"objectID":"d835fd77681a15b3b438bf8c8fb74fe4","permalink":"http://akjamie.github.io/2019/07/14/harshicorp-vault-setup-config/","publishdate":"2019-07-14T12:10:27Z","readingtime":2,"relpermalink":"/2019/07/14/harshicorp-vault-setup-config/","section":"post","summary":"Install vault Prepare docker-compose.yml, content as below (just a sample here, please don\u0026rsquo;t use it for production, there are more aspects should be considered) version: \u0026#39;3\u0026#39; services: consul: container_name: consul.server command: agent -server -bind 0.0.0.0 -client 0.0.0.0 -bootstrap-expect=1 image: consul:latest restart: always volumes: - ./consul.server/config:/consul/config - ./consul.server/data:/consul/data ports: - \u0026#34;9300:9300\u0026#34; - \u0026#34;9500:9500\u0026#34; - \u0026#34;9600:9600/udp\u0026#34; vault: container_name: vault.server image: vault ports: - \u0026#34;8200:8200\u0026#34; restart: always links: - consul:consul.server volumes: - ./vault.server/config:/mnt/vault/config","tags":["Harshicorp Vault","Docker","Spring Cloud"],"title":"Harshicorp Vault Setup Config and integration with spring boot","type":"post","url":"/2019/07/14/harshicorp-vault-setup-config/","weight":0,"wordcount":938},{"author":null,"categories":null,"content":null,"date":1563098046,"description":"","dir":"\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":200,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1563098046,"objectID":"6083a88ee3411b0d17ce02d738f69d47","permalink":"http://akjamie.github.io/about/","publishdate":"2019-07-14T09:54:06Z","readingtime":1,"relpermalink":"/about/","section":"","summary":"Jamie Zhang is from NorthWestern of China - Shaanxi province. He has 10+ years of experience in web/mobile application development and management, led a number of large-scale projects in big companies, e.g. Huawei, ChinaSoft, HSBC.\nHe is experienced Agile Coach, and facilitated team to adopt scrum , maturer scrum practices and built their mindset of keeping improving and fast-iteration + fast-fail, which built good team culture, improved project delivery efficiency and great customer/market feedback.","tags":null,"title":"Jamie","type":"page","url":"/about/","weight":0,"wordcount":133},{"author":null,"categories":null,"content":null,"date":1563098046,"description":"","dir":"top\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":200,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1563098046,"objectID":"7a0da914bde98a7d3fcc7f6c5886633c","permalink":"http://akjamie.github.io/top/about/","publishdate":"2019-07-14T09:54:06Z","readingtime":1,"relpermalink":"/top/about/","section":"top","summary":"Jamie Zhang is from NorthWestern of China - Shaanxi province. He has 10+ years of experience in web/mobile application development and management, led a number of large-scale projects in big companies, e.g. Huawei, ChinaSoft, HSBC.\nHe is experienced Agile Coach, and facilitated team to adopt scrum , maturer scrum practices and built their mindset of keeping improving and fast-iteration + fast-fail, which built good team culture, improved project delivery efficiency and great customer/market feedback.","tags":null,"title":"Jamie","type":"top","url":"/top/about/","weight":0,"wordcount":133},{"author":null,"categories":["Cloud"],"content":"基于python，演示AWS SAM的开发部署过程，含通过aws api gateway暴露api","date":1560173770,"description":"基于python，演示AWS SAM的开发部署过程，含通过aws api gateway暴露api","dir":"post\\","excerpt_html":"基于python，演示AWS SAM的开发部署过程，含通过aws api gateway暴露api","excerpt_text":"基于python，演示AWS SAM的开发部署过程，含通过aws api gateway暴露api","expirydate":-62135596800,"fuzzywordcount":900,"html":"基于python，演示AWS SAM的开发部署过程，含通过aws api gateway暴露api","keywords":null,"kind":"page","lang":"en","lastmod":1560173770,"objectID":"4750e3381ec58808af59b35d9c9133fb","permalink":"http://akjamie.github.io/post/2019-07-23-aws-server-application-model/","publishdate":"2019-06-10T13:36:10Z","readingtime":2,"relpermalink":"/post/2019-07-23-aws-server-application-model/","section":"post","summary":"AWS SAM - lambda demo Demo User Case User requirement: dynamically get regional mobile app feature availability status,status data is kept in AWS dynamodb. Projectcodes hierarchical structure presented as below ├── README.md -- This instructions file ├── event.json -- API Gateway Proxy Integration event payload ├── feature_availability -- Source code for a lambda function │ ├── __init__.py │ ├── app.py","tags":["Python","AWS","Serveless"],"title":"AWS Serveless Application Model","type":"post","url":"/post/2019-07-23-aws-server-application-model/","weight":0,"wordcount":897},{"author":null,"categories":["Others"],"content":"simple demostration about how to implement python script invocation in UIPath","date":1547899827,"description":"simple demostration about how to implement python script invocation in UIPath","dir":"post\\","excerpt_html":"simple demostration about how to implement python script invocation in UIPath","excerpt_text":"simple demostration about how to implement python script invocation in UIPath","expirydate":-62135596800,"fuzzywordcount":1400,"html":"simple demostration about how to implement python script invocation in UIPath","keywords":null,"kind":"page","lang":"en","lastmod":1547899827,"objectID":"5e1a3898b14e397cf43e62014d898949","permalink":"http://akjamie.github.io/2019/01/19/UIPath-invoke-python-method/","publishdate":"2019-01-19T12:10:27Z","readingtime":3,"relpermalink":"/2019/01/19/UIPath-invoke-python-method/","section":"post","summary":"UIPath是一个非常不错的RPA(Robotic Process Automation) 工具和平台，并且有开源社区版本可以方便RPA爱好者去尝试，本文是介绍如何在UIPath","tags":["Python","UIPath"],"title":"How to invoke python scripts in UIPath","type":"post","url":"/2019/01/19/UIPath-invoke-python-method/","weight":0,"wordcount":1345},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"search\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8946788897930c0c0c39fbfcd30ff2e4","permalink":"http://akjamie.github.io/search/placeholder/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/placeholder/","section":"search","summary":"","tags":null,"title":"","type":"search","url":"/search/placeholder/","weight":0,"wordcount":0},{"author":null,"categories":["Microservice"],"content":"","date":-62135596800,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":300,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"59fc7f378f27ac7f2a8c309bf8b81d37","permalink":"http://akjamie.github.io/post/2022-07-08-spring-data-series-01/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/post/2022-07-08-spring-data-series-01/","section":"post","summary":"What is JPA? \u0026ldquo;The Java Persistence API is the Java API for the management of persistence and object/relational mapping in Java EE and Java SE environments. It provides an object/relational mapping facility for the Java application developer using a Java domain model to manage a relational database.\u0026rdquo;\nIt\u0026rsquo;s quoted from JSR(Java Specification Request) managed by Java Community Process.\nThis is just the definition of what\u0026rsquo;s JPA, let\u0026rsquo;s recall how we persist data before adopting JPA.","tags":["Spring Data","JPA"],"title":"Spring Data \u0026 Data Persistent","type":"post","url":"/post/2022-07-08-spring-data-series-01/","weight":0,"wordcount":265}]