[{"author":null,"categories":["NoSQL"],"content":"Redis事务和持久化","date":1656288000,"description":"Redis事务和持久化","dir":"post/","excerpt_html":"Redis事务和持久化","excerpt_text":"Redis事务和持久化","expirydate":-62135596800,"fuzzywordcount":1600,"html":"Redis事务和持久化","keywords":null,"kind":"page","lang":"en","lastmod":1656288000,"objectID":"627e17847d3ac2626ecc169cf56b8857","permalink":"http://akjamie.github.io/post/2022-06-27-redis-basic-2/","publishdate":"2022-06-27T00:00:00Z","readingtime":4,"relpermalink":"/post/2022-06-27-redis-basic-2/","section":"post","summary":"Redis 事务 事务概念和基本操作 其为命令提供一个单独的隔离环境，事务中所有的命令都会序列化，按顺序地执行，执行过程中不会被其他客户端发送过来的命令请","tags":["Redis","NoSQL"],"title":"Redis学习笔记","type":"post","url":"/post/2022-06-27-redis-basic-2/","weight":0,"wordcount":1536},{"author":null,"categories":["NoSQL"],"content":"Redis进阶知识总结","date":1655942400,"description":"Redis进阶知识总结","dir":"post/","excerpt_html":"Redis进阶知识总结","excerpt_text":"Redis进阶知识总结","expirydate":-62135596800,"fuzzywordcount":1500,"html":"Redis进阶知识总结","keywords":null,"kind":"page","lang":"en","lastmod":1655942400,"objectID":"a58bda2dc2e983ffccb2106a46043271","permalink":"http://akjamie.github.io/post/2022-06-23-redis-advance/","publishdate":"2022-06-23T00:00:00Z","readingtime":3,"relpermalink":"/post/2022-06-23-redis-advance/","section":"post","summary":"bitmap 在前面的基础回顾中提到了bitmap这种数据结构，主要用来应对string的位操作，简单高效 适用场景：单状态统计，如每天系统用户登录情况统","tags":["Redis","NoSQL"],"title":"Redis学习笔记","type":"post","url":"/post/2022-06-23-redis-advance/","weight":0,"wordcount":1488},{"author":null,"categories":["NoSQL"],"content":"Redis基础知识回顾","date":1653868800,"description":"Redis基础知识回顾","dir":"post/","excerpt_html":"Redis基础知识回顾","excerpt_text":"Redis基础知识回顾","expirydate":-62135596800,"fuzzywordcount":1700,"html":"Redis基础知识回顾","keywords":null,"kind":"page","lang":"en","lastmod":1653868800,"objectID":"4d03a5849228f6e62482d3254299bef5","permalink":"http://akjamie.github.io/post/2022-05-31-redis-basic-1/","publishdate":"2022-05-30T00:00:00Z","readingtime":4,"relpermalink":"/post/2022-05-31-redis-basic-1/","section":"post","summary":"Redis基础 Common知识 Redis 有16个数据库，一般都使用0号库，使用select dbid 来切换db。 Redis是单线程 + 多路io服用技术 Redis vs memcache Redis","tags":["Redis","NoSQL"],"title":"Redis学习笔记","type":"post","url":"/post/2022-05-31-redis-basic-1/","weight":0,"wordcount":1600},{"author":null,"categories":["Cloud"],"content":"To mark down some key steps for later review","date":1628467200,"description":"To mark down some key steps for later review","dir":"post/","excerpt_html":"To mark down some key steps for later review","excerpt_text":"To mark down some key steps for later review","expirydate":-62135596800,"fuzzywordcount":900,"html":"To mark down some key steps for later review","keywords":null,"kind":"page","lang":"en","lastmod":1628467200,"objectID":"9f5d41a6aef178dbadd399e3a59c948d","permalink":"http://akjamie.github.io/post/2021-08-09-aws-demo-01-autoscale-test/","publishdate":"2021-08-09T00:00:00Z","readingtime":5,"relpermalink":"/post/2021-08-09-aws-demo-01-autoscale-test/","section":"post","summary":"I\u0026rsquo;m on the path of AWS Professinal Certified Architect exam preparation, want to document some key points in the demos for later review to enhance the understanding of knowledge. In this demo, i\u0026rsquo;m going to test the AWS auto scaling and utilize the EC2 network knowledges.\nObjective  To build a health checking springboot application and package as docker image hosted on AWS ECR.\n Setup basic network infrastructure, VPC, Subnet, Internet Gateway, Route table,Security group, etc.","tags":["AWS","Cloud"],"title":"Demo - AWS EC2 instance auto scaling","type":"post","url":"/post/2021-08-09-aws-demo-01-autoscale-test/","weight":0,"wordcount":891},{"author":null,"categories":["Microservice"],"content":"To mark down a batch data sync accross system solution","date":1620432000,"description":"To mark down a batch data sync accross system solution","dir":"post/","excerpt_html":"To mark down a batch data sync accross system solution","excerpt_text":"To mark down a batch data sync accross system solution","expirydate":-62135596800,"fuzzywordcount":700,"html":"To mark down a batch data sync accross system solution","keywords":null,"kind":"page","lang":"en","lastmod":1620432000,"objectID":"1f49b0a4d10236f01af572359f09a560","permalink":"http://akjamie.github.io/post/2021-05-08-microservice-data-sync/","publishdate":"2021-05-08T00:00:00Z","readingtime":3,"relpermalink":"/post/2021-05-08-microservice-data-sync/","section":"post","summary":"Summary To mark down a batch data sync accross system solution, tested daily sync data volume is around 10w.\nIn this solution, adopted the message driven batch processing rather than traditional fixed time schedule batch.\nAlso applied the microservice design to eliminate the system dependency and well protect the data/system boundry,which is also aligned with the DEVOPS,,both team could focus on their own domain/services\u0026rsquo; development and maintenance.\nTechniques used  Springboot + Spring cloud config, constrained by infra, services are running on in hourse VM instances.","tags":["Microservice","Batch"],"title":"Microservice design - practice","type":"post","url":"/post/2021-05-08-microservice-data-sync/","weight":0,"wordcount":631},{"author":null,"categories":["Cloud"],"content":"Experience sharing","date":1615248000,"description":"Experience sharing","dir":"post/","excerpt_html":"Experience sharing","excerpt_text":"Experience sharing","expirydate":-62135596800,"fuzzywordcount":500,"html":"Experience sharing","keywords":null,"kind":"page","lang":"en","lastmod":1615248000,"objectID":"97aec582d92ad32a8139a48ea9ecea7d","permalink":"http://akjamie.github.io/post/2021-03-09-gcp-professional-cerified-architecture-prep/","publishdate":"2021-03-09T00:00:00Z","readingtime":3,"relpermalink":"/post/2021-03-09-gcp-professional-cerified-architecture-prep/","section":"post","summary":"Today i took Google Cloud Certified Professional Cloud Architect exam, the result is pass，through the final result is being reviewed for compliance with exam terms and conditions, i\u0026rsquo;d like to summarize the preparation path i went through for this exam, hope that could help others who want to take the same exam.\nAbout the exam Professional Cloud Architect is one of the google cloud professonal cerficates, it requires a thorough understanding of cloud architecture and Google Cloud Platform, and verifies the capability of design, develop, and manage robust, secure, scalable, highly available, and dynamic solutions to drive business objectives.","tags":["GCP","Certificate"],"title":"How i prepare the Google Cloud Professional Cloud Architect Certificate","type":"post","url":"/post/2021-03-09-gcp-professional-cerified-architecture-prep/","weight":0,"wordcount":427},{"author":null,"categories":["Microservice"],"content":"to run a cloud config service which built using spring boot cloud config","date":1606608000,"description":"to run a cloud config service which built using spring boot cloud config","dir":"post/","excerpt_html":"to run a cloud config service which built using spring boot cloud config","excerpt_text":"to run a cloud config service which built using spring boot cloud config","expirydate":-62135596800,"fuzzywordcount":1000,"html":"to run a cloud config service which built using spring boot cloud config","keywords":null,"kind":"page","lang":"en","lastmod":1606608000,"objectID":"2a8f9c88286c4d7e3e1b6932d3971e64","permalink":"http://akjamie.github.io/post/2020-11-29-run-application-on-k8s/","publishdate":"2020-11-29T00:00:00Z","readingtime":5,"relpermalink":"/post/2020-11-29-run-application-on-k8s/","section":"post","summary":"this page shows how to run a spring boot application on local K8S environment.\nObjectives 1.create spring boot application and build a docker image\n2.create local persistent volume to share the files from host\n3.create deployment and service to run this application and expose for external access.\nBefore you begin install docker desktop in local and enable local k8s cluster, more details please refer to docker official guide or k8s local cluster setup guide.","tags":["Spring Cloud","K8S"],"title":"Kubernates - Practice","type":"post","url":"/post/2020-11-29-run-application-on-k8s/","weight":0,"wordcount":962},{"author":null,"categories":["Cloud"],"content":"gcp network connections - VPC peering/VPN - poc","date":1599436800,"description":"gcp network connections - VPC peering/VPN - poc","dir":"post/","excerpt_html":"gcp network connections - VPC peering/VPN - poc","excerpt_text":"gcp network connections - VPC peering/VPN - poc","expirydate":-62135596800,"fuzzywordcount":500,"html":"gcp network connections - VPC peering/VPN - poc","keywords":null,"kind":"page","lang":"en","lastmod":1599436800,"objectID":"fc669180747381671e5f6b7abc518fee","permalink":"http://akjamie.github.io/post/2020-09-07-gcp-network-connection/","publishdate":"2020-09-07T00:00:00Z","readingtime":2,"relpermalink":"/post/2020-09-07-gcp-network-connection/","section":"post","summary":"To document the setup process for VPC peering accross different GCP project VPCs for demo purpose only.\nSetup VPC peering accross two GCP projects in this demo, will create two GCP projects, and setup VPC network peering to work as network bridge to make sure the vm in one of GCP project can access the MongoDB installed on VM of another GCP project. preparation Mongo backups 1\u0026gt; backup MongoDB","tags":["GCP","VPC","Mongo"],"title":"GCP Network Connection (1)","type":"post","url":"/post/2020-09-07-gcp-network-connection/","weight":0,"wordcount":408},{"author":null,"categories":["NoSQL"],"content":"Mongodb 基本操作 - Insert/Find/Update/Remove","date":1599264000,"description":"Mongodb 基本操作 - Insert/Find/Update/Remove","dir":"post/","excerpt_html":"Mongodb 基本操作 - Insert/Find/Update/Remove","excerpt_text":"Mongodb 基本操作 - Insert/Find/Update/Remove","expirydate":-62135596800,"fuzzywordcount":1200,"html":"Mongodb 基本操作 - Insert/Find/Update/Remove","keywords":null,"kind":"page","lang":"en","lastmod":1599264000,"objectID":"14760c47f9d32b9595709cb8f02ce592","permalink":"http://akjamie.github.io/post/2020-09-05-mongo-basics/","publishdate":"2020-09-05T00:00:00Z","readingtime":3,"relpermalink":"/post/2020-09-05-mongo-basics/","section":"post","summary":"Mongo installation(for test) docker command for local mongo installation docker run -p 27017:27017 -v /Users/jamie/Documents/work-benches/mongo/test:/data/db --name mongo -d mongo:latest check mongo running status docker ps | grep mongo 9161bd4811a8 mongo:latest \u0026ldquo;docker-entrypoint.s…\u0026rdquo; 6 days ago Up 6 days","tags":["NoSQL","Mongo"],"title":"Mongo DB Basics (1)","type":"post","url":"/post/2020-09-05-mongo-basics/","weight":0,"wordcount":1162},{"author":null,"categories":["Microservice"],"content":"Spring Transaction 之 JTA事务管理","date":1567209600,"description":"Spring Transaction 之 JTA事务管理","dir":"post/","excerpt_html":"Spring Transaction 之 JTA事务管理","excerpt_text":"Spring Transaction 之 JTA事务管理","expirydate":-62135596800,"fuzzywordcount":1900,"html":"Spring Transaction 之 JTA事务管理","keywords":null,"kind":"page","lang":"en","lastmod":1567209600,"objectID":"3e38b8eb6a18a4f74033eadce2edb3b4","permalink":"http://akjamie.github.io/post/2019-08-31-spring-global-transaction/","publishdate":"2019-08-31T00:00:00Z","readingtime":4,"relpermalink":"/post/2019-08-31-spring-global-transaction/","section":"post","summary":"先回顾上一篇sprint local transaction的内容，本地事务是用于指定资源，即单一数据源，其主要结构如下： 那么我们来看看spring的g","tags":["Spring","Transaction Management"],"title":"Spring Transaction","type":"post","url":"/post/2019-08-31-spring-global-transaction/","weight":0,"wordcount":1832},{"author":null,"categories":["Microservice"],"content":"Spring Transaction 之 Local Transaction实现原理","date":1567123200,"description":"Spring Transaction 之 Local Transaction实现原理","dir":"post/","excerpt_html":"Spring Transaction 之 Local Transaction实现原理","excerpt_text":"Spring Transaction 之 Local Transaction实现原理","expirydate":-62135596800,"fuzzywordcount":1700,"html":"Spring Transaction 之 Local Transaction实现原理","keywords":null,"kind":"page","lang":"en","lastmod":1567123200,"objectID":"e9b1e2c0b8cd6cae4ca10b6b1d7e3d6a","permalink":"http://akjamie.github.io/post/2019-08-30-spring-local-transaction/","publishdate":"2019-08-30T00:00:00Z","readingtime":4,"relpermalink":"/post/2019-08-30-spring-local-transaction/","section":"post","summary":"事务特性和隔离级别 事务基础 事务特性 - 原子性(Atomicity) 事务包含的所有操作是一个原子单元，要么全部成功，要么全部失败 - 一致性（Con","tags":["Spring","Transaction Management"],"title":"Spring Transaction","type":"post","url":"/post/2019-08-30-spring-local-transaction/","weight":0,"wordcount":1664},{"author":null,"categories":["NoSQL"],"content":"redis基础知识","date":1564876800,"description":"redis基础知识","dir":"post/","excerpt_html":"redis基础知识","excerpt_text":"redis基础知识","expirydate":-62135596800,"fuzzywordcount":6000,"html":"redis基础知识","keywords":null,"kind":"page","lang":"en","lastmod":1564876800,"objectID":"7a7657940b109fd5d226b9c2f64ee3db","permalink":"http://akjamie.github.io/post/2019-08-04-redis-basic/","publishdate":"2019-08-04T00:00:00Z","readingtime":12,"relpermalink":"/post/2019-08-04-redis-basic/","section":"post","summary":"redis是一个key-value存储系统，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)","tags":["Redis","NoSQL"],"title":"Redis学习笔记","type":"post","url":"/post/2019-08-04-redis-basic/","weight":0,"wordcount":5905},{"author":null,"categories":["Microservice"],"content":"分享一个遇到的分布式事务case, 以及部分引申思考","date":1563910810,"description":"分享一个遇到的分布式事务case, 以及部分引申思考","dir":"post/","excerpt_html":"分享一个遇到的分布式事务case, 以及部分引申思考","excerpt_text":"分享一个遇到的分布式事务case, 以及部分引申思考","expirydate":-62135596800,"fuzzywordcount":800,"html":"分享一个遇到的分布式事务case, 以及部分引申思考","keywords":null,"kind":"page","lang":"en","lastmod":1563910810,"objectID":"8330b93025c5aeced8363c4d3612ede8","permalink":"http://akjamie.github.io/post/2019-07-24-one-distributed-transaction-user-case/","publishdate":"2019-07-23T19:40:10Z","readingtime":2,"relpermalink":"/post/2019-07-24-one-distributed-transaction-user-case/","section":"post","summary":"用户场景 在某企业app上做Payment业务，在app端准备好request data， 如debit account number, credit account number, amount, notes, 点击submit。 业务流程如","tags":["Design","Distributed Transaction","Transaction Management"],"title":"微服务中的分布式事务","type":"post","url":"/post/2019-07-24-one-distributed-transaction-user-case/","weight":0,"wordcount":777},{"author":null,"categories":["Microservice"],"content":"通过一个demo，来综合运用spring cloud系列技术","date":1563888970,"description":"通过一个demo，来综合运用spring cloud系列技术","dir":"post/","excerpt_html":"通过一个demo，来综合运用spring cloud系列技术","excerpt_text":"通过一个demo，来综合运用spring cloud系列技术","expirydate":-62135596800,"fuzzywordcount":1500,"html":"通过一个demo，来综合运用spring cloud系列技术","keywords":null,"kind":"page","lang":"en","lastmod":1563888970,"objectID":"9b3e9026272f83b7fa03bbc655d7052a","permalink":"http://akjamie.github.io/post/2019-07-15-spring-cloud-demo-overview/","publishdate":"2019-07-23T13:36:10Z","readingtime":3,"relpermalink":"/post/2019-07-15-spring-cloud-demo-overview/","section":"post","summary":"Demo的介绍 本文主要通过一个小demo，来综合运用spring cloud系列技术，demo中主要包含如下模块/组建： 1. Authorization service, 基于Spring","tags":["Spring Cloud","Spring Boot","Docker"],"title":"Spring Cloud Series","type":"post","url":"/post/2019-07-15-spring-cloud-demo-overview/","weight":0,"wordcount":1402},{"author":null,"categories":["Microservice"],"content":"spring batch 批处理poc","date":1563888970,"description":"spring batch 批处理poc","dir":"post/","excerpt_html":"spring batch 批处理poc","excerpt_text":"spring batch 批处理poc","expirydate":-62135596800,"fuzzywordcount":1900,"html":"spring batch 批处理poc","keywords":null,"kind":"page","lang":"en","lastmod":1563888970,"objectID":"8490cf286f8f2f80867d09f757b5b4de","permalink":"http://akjamie.github.io/post/2019-07-21-spring-batch-single-process-remote-partitioning/","publishdate":"2019-07-23T13:36:10Z","readingtime":4,"relpermalink":"/post/2019-07-21-spring-batch-single-process-remote-partitioning/","section":"post","summary":"Spring batch是轻量级，全面的批处理框架，旨在开发对企业系统日常运营至关重要的强大批处理应用程序。 Spring Batch负责大量记录，包括日志记录/跟踪","tags":["Spring Batch"],"title":"Spring batch - single process \u0026 remote partitioning(multi instances)","type":"post","url":"/post/2019-07-21-spring-batch-single-process-remote-partitioning/","weight":0,"wordcount":1807},{"author":null,"categories":["Others"],"content":"介绍用如何使用Let's Encrypt's Certbot生成CA证书，并配置在nginx中保护站点","date":1563129005,"description":"介绍用如何使用Let's Encrypt's Certbot生成CA证书，并配置在nginx中保护站点","dir":"post/","excerpt_html":"介绍用如何使用Let's Encrypt's Certbot生成CA证书，并配置在nginx中保护站点","excerpt_text":"介绍用如何使用Let's Encrypt's Certbot生成CA证书，并配置在nginx中保护站点","expirydate":-62135596800,"fuzzywordcount":1500,"html":"介绍用如何使用Let's Encrypt's Certbot生成CA证书，并配置在nginx中保护站点","keywords":null,"kind":"page","lang":"en","lastmod":1563129005,"objectID":"1e99a9399c856f918b86e98ea630ce98","permalink":"http://akjamie.github.io/2019/07/14/free-https-certs-docker-nginx/","publishdate":"2019-07-14T18:30:05Z","readingtime":3,"relpermalink":"/2019/07/14/free-https-certs-docker-nginx/","section":"post","summary":"Background Let\u0026rsquo;s Encrypt is a certificate authority that provides X.509 certificates for Transport Layer Security (TLS) encryption at no charge,The certificate is valid for 90 days, during which renewal can take place at anytime. 这样我们就可以用上免费的CA cert来安全expose我们自己的网站或者","tags":["Docker","Let’s Encrypt","Nginx"],"title":"Free CA Certs setup using Certbot + Docker + Nginx","type":"post","url":"/2019/07/14/free-https-certs-docker-nginx/","weight":0,"wordcount":1455},{"author":null,"categories":["Others"],"content":"Using Shadowsocks+proxychain to build network proxy for personal learning purpose","date":1563115852,"description":"Using Shadowsocks+proxychain to build network proxy for personal learning purpose","dir":"post/","excerpt_html":"Using Shadowsocks+proxychain to build network proxy for personal learning purpose","excerpt_text":"Using Shadowsocks+proxychain to build network proxy for personal learning purpose","expirydate":-62135596800,"fuzzywordcount":1500,"html":"Using Shadowsocks+proxychain to build network proxy for personal learning purpose","keywords":null,"kind":"page","lang":"en","lastmod":1563115852,"objectID":"9ba7a47fc53cf70ad5cba2da0e710040","permalink":"http://akjamie.github.io/post/2019-07-14-linux-network-proxy-setup-desktop-terminal/","publishdate":"2019-07-14T14:50:52Z","readingtime":3,"relpermalink":"/post/2019-07-14-linux-network-proxy-setup-desktop-terminal/","section":"post","summary":"背景介绍 很多时候我们由于great firewall，我们无法访问某些网站，这时候就需要用到网络代理来应对一些比较urgent的case，本文","tags":["Shadowsocks","Proxychain"],"title":"Linux network proxy setup for desktop and terminal","type":"post","url":"/post/2019-07-14-linux-network-proxy-setup-desktop-terminal/","weight":0,"wordcount":1438},{"author":null,"categories":["Others"],"content":"介绍用docker-compose安装Vault并配置nginx代理，并与spring cloud application进行集成","date":1563106227,"description":"介绍用docker-compose安装Vault并配置nginx代理，并与spring cloud application进行集成","dir":"post/","excerpt_html":"介绍用docker-compose安装Vault并配置nginx代理，并与spring cloud application进行集成","excerpt_text":"介绍用docker-compose安装Vault并配置nginx代理，并与spring cloud application进行集成","expirydate":-62135596800,"fuzzywordcount":1000,"html":"介绍用docker-compose安装Vault并配置nginx代理，并与spring cloud application进行集成","keywords":null,"kind":"page","lang":"en","lastmod":1563106227,"objectID":"d835fd77681a15b3b438bf8c8fb74fe4","permalink":"http://akjamie.github.io/2019/07/14/harshicorp-vault-setup-config/","publishdate":"2019-07-14T12:10:27Z","readingtime":2,"relpermalink":"/2019/07/14/harshicorp-vault-setup-config/","section":"post","summary":"Install vault Prepare docker-compose.yml, content as below (just a sample here, please don\u0026rsquo;t use it for production, there are more aspects should be considered) version: '3' services: consul: container_name: consul.server command: agent -server -bind 0.0.0.0 -client 0.0.0.0 -bootstrap-expect=1 image: consul:latest restart: always volumes: - ./consul.server/config:/consul/config - ./consul.server/data:/consul/data ports: - \u0026quot;9300:9300\u0026quot; - \u0026quot;9500:9500\u0026quot; - \u0026quot;9600:9600/udp\u0026quot; vault: container_name: vault.server image: vault ports: - \u0026quot;8200:8200\u0026quot; restart: always links: - consul:consul.server volumes: - ./vault.server/config:/mnt/vault/config","tags":["Harshicorp Vault","Docker","Spring Cloud"],"title":"Harshicorp Vault Setup Config and integration with spring boot","type":"post","url":"/2019/07/14/harshicorp-vault-setup-config/","weight":0,"wordcount":938},{"author":null,"categories":null,"content":null,"date":1563098046,"description":"","dir":"top/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1563098046,"objectID":"7a0da914bde98a7d3fcc7f6c5886633c","permalink":"http://akjamie.github.io/top/about/","publishdate":"2019-07-14T09:54:06Z","readingtime":1,"relpermalink":"/top/about/","section":"top","summary":"Jamie Zhang is from Shannxi China. He has more than 9 years of experience in web/mobile application development and management, participated in a number of large-scale projects in Huawei \u0026amp; HSBC.\nHe loves open source and likes learning new technologies.\nHe also has strong interests in various tech stuff such as Artificial Intelligence, Microservice, Cloud native.\nHe is happy with his current job, but also willing to take new challenges if the opportunity matches his career path.","tags":null,"title":"Jamie","type":"top","url":"/top/about/","weight":0,"wordcount":91},{"author":null,"categories":["Cloud"],"content":"基于python，演示AWS SAM的开发部署过程，含通过aws api gateway暴露api","date":1560173770,"description":"基于python，演示AWS SAM的开发部署过程，含通过aws api gateway暴露api","dir":"post/","excerpt_html":"基于python，演示AWS SAM的开发部署过程，含通过aws api gateway暴露api","excerpt_text":"基于python，演示AWS SAM的开发部署过程，含通过aws api gateway暴露api","expirydate":-62135596800,"fuzzywordcount":900,"html":"基于python，演示AWS SAM的开发部署过程，含通过aws api gateway暴露api","keywords":null,"kind":"page","lang":"en","lastmod":1560173770,"objectID":"4750e3381ec58808af59b35d9c9133fb","permalink":"http://akjamie.github.io/post/2019-07-23-aws-server-application-model/","publishdate":"2019-06-10T13:36:10Z","readingtime":2,"relpermalink":"/post/2019-07-23-aws-server-application-model/","section":"post","summary":"AWS SAM - lambda demo Demo User Case User requirement: dynamically get regional mobile app feature availability status,status data is kept in AWS dynamodb. Projectcodes hierarchical structure presented as below ├── README.md -- This instructions file ├── event.json -- API Gateway Proxy Integration event payload ├── feature_availability -- Source code for a lambda function │ ├── __init__.py │ ├── app.py","tags":["Python","AWS","Serveless"],"title":"AWS Serveless Application Model","type":"post","url":"/post/2019-07-23-aws-server-application-model/","weight":0,"wordcount":897},{"author":null,"categories":["Others"],"content":"simple demostration about how to implement python script invocation in UIPath","date":1547899827,"description":"simple demostration about how to implement python script invocation in UIPath","dir":"post/","excerpt_html":"simple demostration about how to implement python script invocation in UIPath","excerpt_text":"simple demostration about how to implement python script invocation in UIPath","expirydate":-62135596800,"fuzzywordcount":1400,"html":"simple demostration about how to implement python script invocation in UIPath","keywords":null,"kind":"page","lang":"en","lastmod":1547899827,"objectID":"5e1a3898b14e397cf43e62014d898949","permalink":"http://akjamie.github.io/2019/01/19/uipath-invoke-python-method/","publishdate":"2019-01-19T12:10:27Z","readingtime":3,"relpermalink":"/2019/01/19/uipath-invoke-python-method/","section":"post","summary":"UIPath是一个非常不错的RPA(Robotic Process Automation) 工具和平台，并且有开源社区版本可以方便RPA爱好者去尝试，本文是介绍如何在UIPath","tags":["Python","UIPath"],"title":"How to invoke python scripts in UIPath","type":"post","url":"/2019/01/19/uipath-invoke-python-method/","weight":0,"wordcount":1346},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"search/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8946788897930c0c0c39fbfcd30ff2e4","permalink":"http://akjamie.github.io/search/placeholder/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/placeholder/","section":"search","summary":"","tags":null,"title":"","type":"search","url":"/search/placeholder/","weight":0,"wordcount":0}]